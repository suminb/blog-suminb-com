---
layout: post
title: PHP Timer
post_id: '659'
categories:
- Geeky Stuff
- Tutorials
tags:
- PHP
status: publish
type: post
published: true
meta:
  _edit_last: '1'
  dsq_thread_id: '287065481'
author:
  login: admin
  email: suminb@gmail.com
  display_name: Sumin
  first_name: Sumin
  last_name: Byeon
redirect_from:
  - /archives/659/
redirect_to:
  - http://philosophical.one/post/php-timer
---
## Introduction

A timer is a very commonly used feature for various purposes such as unit tests or performance optimization. However, it is such a painful job to implement a timer every time as demanded, even though it takes only few lines of code. Here is a solution for those kind of issues.

## Basic Usage

Using `Timer` is pretty simple. It's just like a stop watch in the real life. All we need to do is to push the start button as a sprinter does a start dash, and push the stop button as the sprinter finishes.

	Timer::start();

	// sprint!

	Timer::end();
	Timer::display();

The following or similar message will be displayed by default if no argument is given at `display()` method.

	This page was created in 0.007 seconds.

## Advanced Usage

We can easily change the message by giving an argument.

	Timer::display('It has been %.5f sec');

Then it will display the following.

	It has been 0.00719 sec

Also, we can change the time unit.

	Timer::display('This page was created in %d ms.', 1000);

The second argument mutiplies the duration, which is given in seconds, by itself. As a result, the time unit will be milliseconds instead of seconds.

	This page was created in 7 ms.

Similarly, if you put 1,000,000 or even 1,000,000,000 then the time unit will be microseconds and nanoseconds, respectively. However, there is no guarantee that the timer provides such accuracy.

<!-- In my opinion, milliseconds is enough to measure the performance of your web applications. In order to access to files containing server side scripts or web pages, disk operations are required. Also, it takes some time (or it could be the biggest job) to retrieve some data from a database (which is a very common aspect of most web applications) Hard disks work much slower than RAMs and CPUs. For example, usual access time of most common hard disks is approximately 8-9ms whereas the time unit of current dynamic random access memories is nanoseconds. So, it is not worth to care about these kind of small time units. -->

## Restrictions

This `Timer` class is not designed for *nested* multiple timers on a single page. (i.e. Once a timer starts, we can't start the timer before we stop the timer. Otherwise, it wouldn't work properly) However, we can easily change it by removing `static` keywords, and substituting `self` keyword with `this` so that we can generate multiple timers. Also, we can add a constructor as necessary. Now, we're gonna have to make an actual instance of `Timer` to be able to use it.

## Full Source

	<?php
	/**
	 * @since 20070619
	 * @version 20070619
	 * @author Sumin Byeon
	 * @copyright Copyright (c) 2003-2007 SBBS Team
	 */
	class Timer {

		private static $start;
		private static $end;

		public static function start() {
			self::$start = microtime(true);
		}

		public static function end() {
			self::$end = microtime(true);
		}

		public static function getDuration() {
			return self::$end - self::$start;
		}

		public static function display($message = 'This page was created in %.3f seconds.<br/>', $multiplier=1) {
			printf($message, self::getDuration()*$multiplier);
		}
	}
	?>

## References

* [Creating a PHP Script Timer](http://www.developertutorials.com/tutorials/php/php-script-timer-051013/page1.html)
* [PHP: microtime - Manual](http://www.php.net/microtime)

